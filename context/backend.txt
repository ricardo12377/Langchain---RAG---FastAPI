## DocuSync API - Backend, API RESTful desenvolvida com **NestJS**, **TypeScript** e **Prisma ORM**, responsável por toda a lógica de negócios, autenticação, gerenciamento de usuários e manipulação de documentos da plataforma **DocuSync**. ### Tecnologias utilizadas, - Node.js 20+, - NestJS 10+, - TypeScript, - Prisma ORM (MySQL), - Zod (validação), - Passport + JWT (autenticação), - Stripe (pagamentos), - AWS S3 (armazenamento), - BullMQ (fila de tarefas), - PDF-Lib (assinatura digital), - Redis (cache e filas), - Swagger (documentação da API), ---, ## Arquitetura, - Padrão **modular** com domain-driven design, - Separação por modules, services, controllers, dto, entities e guards, - Foco em escalabilidade, segurança e manutenção, Estrutura de pastas:, ---, ## Autenticação, - Login via e-mail e senha, - Verificação de e-mail via token, - Refresh Token (guardado via httpOnly), - JWT assinado com RS256, - Middleware de verificação de plano ativo, ---, ## Regras de Negócio, ### Acesso e Autenticação, - Usuário só pode acessar os endpoints se:, - Autenticado com JWT válido, - E-mail verificado, - Plano ativo (middleware `PlanGuard`), - Apenas usuários com `Admin` podem acessar:, - `/api/organization/settings`, - `/api/users/list`, - `/api/logs/*`, ---, ### Upload de Documentos, - Permitido apenas para usuários com:, - Plano ativo, - Cota de uploads disponível (`@ThrottleByPlan`), - Uploads são salvos no S3, - Metadados armazenados no banco, - Conteúdo ofensivo é rejeitado via IA, ---, ### Assinaturas, - Documento só pode ser assinado se:, - Todos os campos obrigatórios forem preenchidos, - Ordem de assinatura correta, - Após assinaturas:, - Documento bloqueado (readonly), - Hash salvo no banco, - Registro em `signature_audit` com IP, data, signatário e CPF, ---, ### Pagamentos, - Cobrança mensal via Stripe, - Webhooks atualizam status do plano em tempo real, - Atraso de 7 dias:, - Acesso restrito a leitura, - Uploads e assinaturas bloqueados, ---, ## Permissões, A função Admin pode gerenciar usuários, planos, documentos e auditoria, a função Editor pode realizar uploads, assinaturas, comentários e organização de documentos, enquanto a função Visualizador tem acesso somente à leitura e comentários. | Admin | Gerenciar usuários, planos, documentos, auditoria |, | Editor | Upload, assinatura, comentário, organização |, | Visualizador | Apenas leitura e comentários |, ---, ## Restrições por Plano, **Planos Gratuitos:**, - Máximo de 10 uploads/mês, - Apenas 5 documentos assináveis, - Compartilhamento de até 5 documentos/mês, - Excedentes recebem erro HTTP 402 Payment Required, ---, ## Testes, - Unitários com Jest, - Integração com Supertest, - Mocks: AWS, Stripe, Redis, Prisma, - Cobertura mínima de testes: 85%, ---, ## Endpoints REST, ### Auth, POST /api/auth/login, POST /api/auth/register, POST /api/auth/verify-email, POST /api/auth/refresh, ### Usuários, GET /api/users/profile, PATCH /api/users/update, GET /api/users/list # Apenas Admin, ### Documentos, POST /api/documents/upload # Verifica plano, GET /api/documents/:id, DELETE /api/documents/:id # Admin ou dono, GET /api/documents/:id/versions, POST /api/documents/:id/rollback # Admin, ### Assinaturas, POST /api/signatures/:docId/request, POST /api/signatures/:docId/sign, GET /api/signatures/:docId/audit-log, ---, ## Guards e Interceptors, ### PlanGuard, Verifica se o usuário possui plano ativo e limite disponível. ### RolesGuard, Bloqueia acesso baseado na role do usuário (Admin, Editor, Viewer). ### ThrottleByPlanInterceptor, Aplica limites por plano no upload, comentários, etc. ---, ## Entidades, ### Classe Document (GraphQL), ```ts, @ObjectType(), export class Document {, id: string;, name: string;, url: string;, ownerId: string;, organizationId: string;, isSigned: boolean;, createdAt: Date;, updatedAt: Date;, version: number;, currentSignStatus: 'PENDING' | 'PARTIALLY_SIGNED' | 'SIGNED';, }, model User {, id String @id @default(uuid()), email String @unique, password String, role Role @default(VIEWER), plan Plan @default(FREE), isVerified Boolean @default(false), createdAt DateTime @default(now()), documents Document[], }, enum Plan {, FREE, STANDARD, ENTERPRISE, }, model Document {, id String @id @default(uuid()), name String, url String, ownerId String, organizationId String, isSigned Boolean @default(false), createdAt DateTime @default(now()), }, .